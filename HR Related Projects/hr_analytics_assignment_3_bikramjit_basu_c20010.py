# -*- coding: utf-8 -*-
"""HR_analytics_Assignment_3 Bikramjit_Basu_C20010.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17wpwzRLQZ7EMIhtAGN0wX_aa0d9bAW0s

## Suppose you have to design or modify HR policy of a company related to workplace accident compensation. You have the attached data to analyse.This company has plants in three countries, in 12 locations.
"""

import pandas as pd
import os
import matplotlib.pyplot as plt
import numpy as np
import statistics as s
import nltk as n
from nltk.corpus import stopwords

from google.colab import files
files.upload()

df2= pd.read_csv("IHMStefanini_industrial_safety_and_health_database_with_accidents_description (1).csv")

industry_sector =df2['Industry Sector']
industry_sector_list=[]


for i in industry_sector:
    if i in industry_sector_list:
        None
    else:
        industry_sector_list.append(i)
        
print(industry_sector_list)

"""# **Graph representing the portion of accidents by country**"""

temp=df2.groupby('Countries').count().reset_index()


plt.figure(figsize=(10,5))
plt.bar(temp['Countries'],temp['Data'])
plt.title('Graph representing the portion of accidents by country')
plt.xlabel('Countries')
plt.ylabel('Accidents')
plt.show()

"""# **Graph representing the portion of accidents by sector**"""

secteur= df2.groupby('Industry Sector').count().sort_values(by=['Data'],ascending = False).reset_index()

plt.pie(secteur['Data'], labels= secteur['Industry Sector'], autopct='%1.1f%%', shadow = True, explode = [0.1, 0.1, 0.1], radius = 1) 
plt.title("Graph representing the portion of accidents by sector")

"""# **Graph representing the proportion of accidents by gender**"""

genre=df2.groupby('Genre').count().sort_values(by=['Data'], ascending = False).reset_index()


plt.pie(genre['Data'], labels = genre['Genre'], autopct='%1.1f%%', shadow = True)
plt.title('Graph representing the proportion of accidents by gender')

print("The number of accidents suffered by males = ",genre.loc[0,'Data'])
print("The number of accidents suffered by femelles = ",genre.loc[1,'Data'])

"""# **Graph representing the accident breakdown by Local**"""

local = df2.groupby('Local').count().sort_values(by=['Data'], ascending = False).reset_index()



locals = []
for x in local['Local']:
    locals.append(x[7:])

plt.figure(figsize=(10,5))
plt.bar(locals,local['Data'])
plt.xlabel("Local")
plt.ylabel("Accident")
plt.title("Graph representing the accident breakdown by Local")
plt.show()

print("The average accident per local = ",s.mean(local['Data']))

df2.head()

df2.info()

"""# **Critical risk classification:**"""

risk=df2.groupby('Critical Risk').count().sort_values(by=['Data'], ascending = False).reset_index()

plt.figure(figsize=(20,10))
plt.bar(risk['Critical Risk'],risk['Data'])
plt.xticks(rotation = 'vertical')

"""The distribution of accidents suffered by employees:"""

interi=df2.groupby('Employee or Third Party').count().sort_values(by = ['Data'], ascending = False).reset_index()
plt.figure(figsize=(10,5))
plt.pie(interi['Data'], labels =interi['Employee or Third Party'], autopct='%1.1f%%', shadow = True, explode=[0.1, 0.1, 0])
plt.title('Repartition des accidents subis par des employees ou des interimaires')

"""# **Is there a correlation in the level of accident and the potential level of accident?**"""

accident_level= df2.groupby('Accident Level').count().sort_values(by=['Data'],ascending = False).reset_index()

pot_accident_level= df2.groupby('Potential Accident Level').count().sort_values(by = ['Data'], ascending = False).reset_index()

df_al=accident_level.loc[:,'Accident Level': 'Data']
df_pal = pot_accident_level.loc[:, 'Potential Accident Level': 'Data']

df_al = df_al.sort_values(by=['Accident Level'], ascending= True).reset_index()
df_pal= df_pal.sort_values(by=['Potential Accident Level'], ascending= True).reset_index()

#Digram in group:
l_bar = 0.2

bar1 = df_al['Data']
bar2 = df_pal['Data']

#Position of the bars on the axis of the X:
r1=np.arange(len(bar1) +1)
r2=[(x + l_bar) for x in r1]
r11=np.arange(len(bar1))

#Plot:
plt.figure(figsize=(10,5))
plt.bar(r11, bar1,color='#FFA500', width=l_bar, edgecolor='white', label="Accident level")

plt.bar(r2, bar2,color='#1966FF', width=l_bar, edgecolor='white', label="Potential Accident Level")

plt.xlabel("Accident level")
plt.xticks([x for x in range(len(bar1))],['I','II','III','IV','V'])
plt.ylabel("Accident Recurence")
plt.legend()
plt.title("Graph representing the recurrence of accidents according to the level of accident recorded and the potential level of accident in an area")

"""# **Accident counts per month and year:**"""

#Reccurence of accidents per month and year:

#Year
df2['Year']=df2['Data'].str[:4]
#Month:
df2['Month'] = df2['Data'].str[5:7]
df2.head()

#We will try to compoast the recurrence of accidents during each month between 2016 and 2017:

#we start with the year 2016

Year_2016=df2.loc[df2['Year']=='2016'].groupby('Month').count().reset_index()
#We're moving on to the 2017
Year_2017=df2.loc[df2['Year']=='2017'].groupby('Month').count().reset_index()

#bar graph to compare the 7 months between 2016 and 2017:
l_bar = 0.2

bar1 = Year_2016['Data'][0:7]
bar2 = Year_2017['Data'][0:7]

"""# **The proportion of accidents (males/females) by sector is now considered**"""

#The required columns are selected:
kind = df2.loc[:,'Industry Sector': 'Genre']
kind.drop(columns =['Accident Level','Potential Accident Level'],inplace = True)

kind=kind.groupby(['Genre','Industry Sector'])['Industry Sector'].count().unstack().reset_index()

kind.head()

#pLot
l=0.2

min_g=[x for x in range(2)]
oth_g=[x+l for x in range(2)]
met_g=[x+2*l for x in range(2)]
plt.figure(figsize=(10,5))
plt.bar(min_g,kind['Mining'],color='red', width=l, edgecolor='white', label="Mining")
plt.bar(met_g,kind['Metals'],color='blue', width=l, edgecolor='white', label="Metal")
plt.bar(oth_g,kind['Others'],color='green', width=l, edgecolor='white', label="Others")

plt.legend()
plt.title('Proportion of accidents (males/females) by sector')
plt.xticks([x/10 for x in range(2,13,10)],['Femelle','Male'])

"""# **Relationship between level and description of accidents:**"""

import nltk
nltk.download('punkt')

import nltk
nltk.download('stopwords')

secc = ['I','II','III','IV','V']
text = ''
for e in secc:
    #print(e)
    acc = df2.loc[:,['Accident Level','Description']].loc[df2['Accident Level'] == e]
    for i in acc['Description']:
      text = text + ' \n' + i 
     #print(i,'\n')

#classify the words in the description :
tokens = n.word_tokenize(text.lower())

#filter the usual words "stopwords" from our token:

stop_words = set(stopwords.words('english'))
#add punctuations:
stop_words.update(['.',',','the','of','and',"'",')','(','-'])
filtred_tokens = [x for x in tokens if  not x  in stop_words]

words_occurrence = n.FreqDist(filtred_tokens)
plt.figure(figsize=(20,10))
plt.title("Graph representing the recurrence of keywords of the accident description")
words_occurrence.plot(60,cumulative = False)
plt.show()
plt.savefig("figure.png")

from nltk.collocations import BigramCollocationFinder
from nltk.metrics import BigramAssocMeasures



bi_temp = BigramCollocationFinder.from_words(filtred_tokens)
bi_temp.nbest(BigramAssocMeasures.likelihood_ratio,100)

from nltk.collocations import TrigramCollocationFinder
from nltk.metrics import TrigramAssocMeasures



bi_temp = TrigramCollocationFinder.from_words([x for x in filtred_tokens if not x in ['accident']])
tri = bi_temp.nbest(TrigramAssocMeasures.likelihood_ratio,100)

tri_dist = n.FreqDist(tri)
#plt.figure(figsize=(20,10))
#tri.plot(100,cumulative = False)
tri

"""# **Modelling**"""

from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split,cross_val_score,validation_curve
from sklearn.metrics import accuracy_score
import joblib
from sklearn import tree
from sklearn.neighbors import KNeighborsClassifier

df2['Pays']=df2['Countries'].str[-1]
X=pd.concat([df2['Genre'],df2['Accident Level'],df2['Potential Accident Level']],axis = 1)

i=0
for x in X['Genre']:
    if X['Genre'][i] == 'Male':
        X['Genre'][i] =1
    else:
        X['Genre'][i]=2
    i=i+1

i=0
for x in X['Accident Level']:
    if X['Accident Level'][i] == 'I':
        X['Accident Level'][i] =1
    if X['Accident Level'][i] == 'II':
        X['Accident Level'][i] =2
    if X['Accident Level'][i] == 'III':
        X['Accident Level'][i] =3
    if X['Accident Level'][i] == 'IV':
        X['Accident Level'][i] =4
    if X['Accident Level'][i] == 'V':
        X['Accident Level'][i] =5
    i=i+1

i=0
for x in X['Potential Accident Level']:
    if X['Potential Accident Level'][i] == 'I':
        X['Potential Accident Level'][i] =1
    if X['Potential Accident Level'][i] == 'II':
        X['Potential Accident Level'][i] =2
    if X['Potential Accident Level'][i] == 'III':
        X['Potential Accident Level'][i] =3
    if X['Potential Accident Level'][i] == 'IV':
        X['Potential Accident Level'][i] =4
    if X['Potential Accident Level'][i] == 'V':
        X['Potential Accident Level'][i] =5
    if X['Potential Accident Level'][i] == 'VI':
        X['Potential Accident Level'][i] =6
    i=i+1

Y=X['Accident Level']

X=X.drop(columns='Accident Level')

Y=Y.astype('int')

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.1)

model = KNeighborsClassifier()
train_val, val_score= validation_curve(model,X_train,Y_train,'n_neighbors',np.arange(1,50),cv=5)
plt.plot(np.arange(1,50),val_score.mean(axis=1))
#cross_val_score(KNeighborsClassifier(50),X_train,Y_train,cv=5,scoring='accuracy')
model.fit(X_train,Y_train)
prediction=model.predict(X_test)
score=accuracy_score(Y_test,prediction)
print("score = ",score)

"""
## In my opinion incidents requires an investigation
## Employers are responsible for immediately conducting an investigation into any incident that involves:

## **  Serious injury to a worker or a worker's death Injury requiring medical
##   teatment.
## **  Minor injury, or no injury, but had the potential for causing serious 
##   injury 
## ** Major structural failure or collapse
## **  Major release of hazardous substances
## ** Diving incident, as defined by the Occupational Health and Safety (OHS)  ##   List item
## ** Dangerous incident involving explosive materials
## **  Blasting incident causing personal injury

## Employers who commit health and safety violations may receive administrative penalties — monetary fines. Fines help motivate employers to meet health and safety requirements in the workplace so everyone can stay safe.

## lastly the families of the sufferer in case of death of seviour injury must be taken care of by the Employer.  
"""

